spring:
  application:
    name: api-gateway
    gateway:
      routes:
        # Auth Service Routes
        - id: auth-login
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/login
            - Method=POST
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
            - AddRequestHeader=X-Gateway-Source, api-gateway
            - RemoveRequestHeader=Cookie

        - id: auth-register
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/register
            - Method=POST
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
            - AddRequestHeader=X-Gateway-Source, api-gateway

        # Customer Service Routes (Protected)
        - id: customer-service
          uri: lb://customer-service
          predicates:
            - Path=/api/customers/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: customer-circuit-breaker
                fallbackUri: forward:/fallback/customer
            - AddRequestHeader=X-Customer-Id, "#{@jwtTokenUtil.extractCustomerId(exchange.request.headers.getFirst('Authorization'))}"

        # Account Service Routes (Protected)
        - id: account-service
          uri: lb://account-service
          predicates:
            - Path=/api/accounts/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: account-circuit-breaker
                fallbackUri: forward:/fallback/account
            - AddRequestHeader=X-Customer-Id, "#{@jwtTokenUtil.extractCustomerId(exchange.request.headers.getFirst('Authorization'))}"

        # Card Service Routes (Protected)
        - id: card-service
          uri: lb://card-service
          predicates:
            - Path=/api/cards/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: card-circuit-breaker
                fallbackUri: forward:/fallback/card
            - AddRequestHeader=X-Customer-Id, "#{@jwtTokenUtil.extractCustomerId(exchange.request.headers.getFirst('Authorization'))}"

        # Credit Service Routes (Protected)
        - id: credit-service
          uri: lb://credit-service
          predicates:
            - Path=/api/credits/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: credit-circuit-breaker
                fallbackUri: forward:/fallback/credit
            - AddRequestHeader=X-Customer-Id, "#{@jwtTokenUtil.extractCustomerId(exchange.request.headers.getFirst('Authorization'))}"

        # Transaction Service Routes (Protected)
        - id: transaction-service
          uri: lb://transaction-service
          predicates:
            - Path=/api/transactions/**
          filters:
            - JwtAuthenticationFilter
            - name: CircuitBreaker
              args:
                name: transaction-circuit-breaker
                fallbackUri: forward:/fallback/transaction
            - AddRequestHeader=X-Customer-Id, "#{@jwtTokenUtil.extractCustomerId(exchange.request.headers.getFirst('Authorization'))}"

        # Reports Service Routes (Protected - Admin only)
        - id: reports-service
          uri: lb://reports-service
          predicates:
            - Path=/api/reports/**
          filters:
            - JwtAuthenticationFilter
            - RoleBasedAuthFilter=ADMIN
            - name: CircuitBreaker
              args:
                name: reports-circuit-breaker
                fallbackUri: forward:/fallback/reports

      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=X-Response-Time, "#{T(System).currentTimeMillis()}"

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mySuperSecretKeyThatIsAtLeast512BitsLongForHS512AlgorithmAndMeetsSecurityRequirements123456789ABC}
  expiration: ${JWT_EXPIRATION:86400000}

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      customer-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: count_based
      account-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 5s
      card-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 5s
      credit-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 5s
      transaction-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 5s
      reports-circuit-breaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 5s

  timelimiter:
    instances:
      default:
        timeout-duration: 5s

# CORS Configuration
cors:
  allowed-origins: "*"
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"
  allow-credentials: true

# Rate Limiting (Redis required)
redis:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:}

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG